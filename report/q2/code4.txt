/*
	1. Plot out a shape as a series od vertices
		*add a abutton for switching between creating new vertices
		and editing
		*Click the canvas to add a vertex
		*Don't draw right away add vertex to 
		an array then draw but don't save to canvas
	2. Edit the vertices
		*if editing is on
		*hightlight the location of the vertices
		*when mouse pressed is near vertex (using the dist)
		update the vertex x and y with the mouseX and mouseY
	3. Confirm the final shape

*/
//button variables
var editButton;
var finishButton;

var editMode = false;

//empty array variable
var currentShape = [];

function setup(){
	//create canvas
	c = createCanvas(1500,700);
	background(200);
	noFill();
	loadPixels();

	//create buttons
	editButton = createButton("Edit Shape");
	finishButton = createButton("Finish Shape");

	//add edit button functionality
	editButton.mousePressed(function(){
		//if edit mode on set it to off and update the buttons text
		if(editMode){
			editMode = false;
			editButton.html("Edit Shape");
		}
		//and vice versa
		else{
			editMode = true;
			editButton.html("Add Vertices")
		} 
	})

	//when mouse is pressed save the canvas in its current state
	finishButton.mousePressed(function(){
		//switch edit mode off when finish button pressed
		editMode = false;
		//manually call draw so the yellow edit spots wont be drawn at the next shape
		draw();
		//clear the shape
		loadPixels();
		currentShape = [];
	})
}

function draw(){
	//update pixels from where we stored it with the prevoius shaping
	updatePixels();
	//add the shape to array
	if(mousePressOnCanvas() && mouseIsPressed){
		//if edit mode is off add the shape
		if(!editMode){
				currentShape.push({
				x: mouseX,
				y: mouseY
			});
		}
		else{
			//loop over every vertex shape in the array
			for(var i = 0; i < currentShape.length; i++){
				//if our mouseX and mouseY is near the current shape x and y
				if(dist(currentShape[i].x, currentShape[i].y, mouseX, mouseY) < 15){
					//update that point
					currentShape[i].x = mouseX;
					currentShape[i].y = mouseY;
				}
			}
		}
	}

	//call the shape- draw for each vertex
	beginShape();
	for(var i = 0; i < currentShape.length; i++){
		vertex(currentShape[i].x, currentShape[i].y);
		//show where the vertex pixels are when editing
		if(editMode){
			fill('yellow');
			ellipse(currentShape[i].x, currentShape[i].y, 10);
			noFill();
		}
	}
	endShape();
}

//detect if mouse is pressed on canvas or not
function mousePressOnCanvas(canvas) {
	canvas = c;
	if(	mouseX > canvas.elt.offsetLeft && 
		mouseX < (canvas.elt.offsetLeft +
		canvas.width) && 
		mouseY > canvas.elt.offsetTop && 
		mouseY < (canvas.elt.offsetTop +
		canvas.height)
	)	{
		return true;
	}
	return false;
}